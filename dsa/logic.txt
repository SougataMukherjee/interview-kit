// 🧠 Visualize how string methods work inside a loop

const str="HELLO"
for (let i = 0; i < str.length; i++) {
  let part = str.slice(0, i + 1); // take from 0 to i+1
  console.log(part);
}
// output: gradually builds substrings "H", "HE", "HEL", "HELL", "HELLO"

// ------------------------------

for (let i = 0; i < str.length; i++) {
  let ch = str.charAt(i);
  console.log(ch);
}
// output: prints each letter one by one H E L L O

// ------------------------------

for (let i = 0; i < str.length; i++) {
  let ch = str[i];
  let index = str.indexOf(ch);
  console.log(index);
}
// output: always shows the first position where character found 0 1 2 2 4

// ------------------------------


for (let i = 0; i < str.length; i++) {
  let ch = str[i];
  let isPresent = str.includes(ch);
  console.log(isPresent);
}
// output: always true because all chars exist in "HELLO" true true true true true

===================
Linked list
===================
Linked List

A Linked List is a linear data structure where each element (node) contains:

Data (value)
Address/Pointer (next node reference)
class Node {
public:
  int data;
  Node* next; // pointer to next node (Node type)
};

Head → [data|next] → [data|next] → [data|NULL]

The list is accessed using a head pointer, which points to the first node.

The last node’s next is NULL.

Traversal is linear — from head to NULL.

Only the head address is known; from that, you can reach every node.


===========
Stack
========
Stack

Stack follows LIFO (Last In, First Out) principle.

Only one end (Top) is used for both insertion and deletion.

Main Operations:

push(x) → insert element on top
pop() → remove element from top

peek() → view top element

isEmpty() → check if stack is empty
Top(push) → ┌───────────┐ ->pop
            │   30 🍪  │  ← top element (last inserted)
            ├───────────┤
            │   20 🍫  │
            ├───────────┤
            │   10 🍩  │
            ├───────────┤
            │    5 🍎  │  ← bottom element (first inserted) check isEmpty()
            └───────────┘

