====================
CSS NOTES
====================

Q1: Is CSS case-sensitive?
No (selectors & properties are not), but values like class names in HTML are.
CSS3 Features & Advantages:
Rounded corners (border-radius)
Animations & transitions
Media queries (responsive)

Q2: Difference between inline, block, and inline-block?
- inline: width/height not applicable (span, a)
- block: takes full width (div, p)
- inline-block: behaves inline but allows width/height.

Q3: What is the Box Model?
Width = content + padding + border (margin lies outside).
Content → Padding → Border → Margin  
Example:

Q4: Explain CSS Specificity Order.
Inline style > ID > Class > Element  
Example:
#id > .class > div
Duplicate ID Problem:
IDs must be unique — use classes instead.

Q5:Favicon:
Small icon in browser tab.
<link rel="icon" href="favicon.ico">

Q6: Position properties?
- static (default)
- relative (moves within itself) Moves relative to its normal position.
- absolute (relative to nearest non-static) Positioned relative to the nearest positioned ancestor.
- fixed (relative to viewport) Stays fixed relative to viewport (even when scrolling).
- sticky (hybrid) Acts relative until scroll crosses threshold, then sticks

Q7: Flexbox Basics.
flexbox useful for 1D layout (row or column).
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}

Q8: Grid Basics.
Grid useful for 2D layout (rows and columns)
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
}

Q9: z-index and stacking context?
z-index works only for positioned elements (relative, absolute, fixed).

Q10: Responsive Design.
Use media queries:
@media (max-width: 768px) {
  .container { flex-direction: column; }
}

Q11: Difference between transition and animation?
Transition: smooth change between two states.Needs trigger (hover, active).
div { transition: all 0.3s; }
div:hover { color: red; }

Animation: runs automatically with @keyframes.
@keyframes move { from{left:0;} to{left:100px;} }
div { animation: move 2s infinite; }

Q12: Pseudo classes and elements.
Pseudo-class: Targets state (e.g., :hover, :focus,:nth-child(2)).
Pseudo-element: Targets part of element (e.g., ::before, ::after)

Q13: Difference between margin and padding
Margin: Space outside the element’s border.
Padding: Space inside the element’s border, around content.

Q14: What are CSS combinators?
Define relationships between selectors:
Descendant (space), Child (>), Adjacent sibling (+), General sibling (~).
<div class="parent">
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
  <span>Span 1</span>
  <span>Span 2</span>
</div>

.parent p { color: blue; }      /* Descendant: all <p> inside .parent */
.parent > p { font-weight: bold; } /* Child: only direct <p> children */
p + span { color: red; }        /* Adjacent sibling: span immediately after <p> */
p ~ span { background: yellow; } /* General sibling: all spans after <p> */

Q15: How do you handle browser compatibility in CSS?
Vendor Prefixes: Add browser-specific prefixes to CSS properties.
display: -webkit-box;   /* Safari/Chrome older */
display: -moz-box;      /* Firefox older */
display: flex;          /* Modern browsers */
Feature Queries / Fallbacks: Use @supports or CSS resets.
@supports (display: grid) {
  .container {
    display: grid;
  }
}

Q16:Difference between em, rem, %, and px
px: Absolute pixel value.
em: Relative to parent font-size.
rem: Relative to root (html) font-size.
%: Relative to parent element size.

Q17: What are CSS variables and how to use them?
Reusable custom properties:
:root { --main-color: blue; }
h1 { color: var(--main-color); }

Q18: @property
Defines custom CSS properties with type and defaults.
Helps in animations and transitions for custom properties
@property --x {
  syntax: "<length>";
  initial-value: 0px;
  inherits: false;
}
div {
  --x: 0px;
  width: var(--x);
  transition: --x 1s;
}

div:hover {
  --x: 100px; /* width will smoothly animate */
}

Q19:CSS Math Functions
calc() → perform calculations (width: calc(100% - 50px);)
min() → picks smallest (width: min(80%, 600px);)
max() → picks largest (width: max(50%, 200px);)
clamp() → range limit (font-size: clamp(14px, 2vw, 20px);)

Q20::global 
we can apply styles globally even inside scoped CSS files.
/* styles.module.css (style apply globally not only in component level) */
:global(.btn) {
  color: red;
}
.localDiv {
  background: yellow;
}

Q21:CSS Attribute Selectors
[attr] → elements with that attribute
[attr=value] → exact match
[attr^=val] → starts with
[attr$=val] → ends with
[attr*=val] → contains substring
Example: input[type="text"]
Selects elements by attribute.
input[type="text"] { color: blue; }

Q22: Superscript & Subscript:
H<sub>2</sub>O → water  
x<sup>2</sup> → square

Q23:CSS Font Fallback
Multiple fonts listed in order of priority.
If first fails, next is used.
Example:
font-family: "Roboto", "Arial", sans-serif;

Q24:Border vs Outline
Border → part of element box, affects layout.
Outline → drawn outside border, doesn’t affect size.
Example:
border: 2px solid red;
outline: 2px solid blue;

Q25:display:none vs visibility:hidden
display:none → removes element from layout
visibility:hidden → hides but keeps layout space
example:

Q26: CSS Selectors
Select elements based on name, class, id, attribute, etc.
Examples:
#id → by id
.class → by class
div → by tag
div p → descendant
div > p → direct child
div + p → next sibling
div ~ p → all following siblings
* → universal
:hover → on hover state
:first-child, :last-child → positional selectors
Why @import only at top?
Because CSS loads top-down — later rules may not apply if file is not loaded first.
Graceful Degradation:
Start for modern browsers → make sure old browsers still work.
 Example: Fancy animation → show static image on old browser.
 Progressive Enhancement:
Start simple → add advanced features if browser supports.
 Example: Plain form → add JS validation later.

Q27: Grouping vs Nesting
Grouping: Combine selectors with comma.
h1, h2 { color: red; }
Nesting (in SCSS)
nav { a { color: blue; } }

==============================
SCSS THEORY
==============================

Q1: What is SCSS and how does it differ from CSS?
A: CSS preprocessor with variables, nesting, mixins, and partials.
Compiles to standard CSS for browsers.

Q2: Variables and scoped
A:
Variables store reusable values and Scoped globally or within blocks.
$primary: #3490dc;
body { color: $primary; }

Q3: Nesting
A:
nav {
  ul {
    li { color: red; }
  }
}

Q4: Mixins and Include
A:
@mixin: Reusable block with parameters (like a function).
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
.container { @include flex-center; }

Q5: Extends
A:
@extend: Inherits all styles of another selector.
%btn {
  padding: 10px;
  border-radius: 5px;
}
.btn-primary {
  @extend %btn;
  background: blue;
}

Q6: Partials and Import
A:
Create _variables.scss, then import:
@import 'variables';
Why easy to insert file with @import?
Simplifies maintenance — one CSS file can include others


Q7: Operators
A:
width: (100% / 3);

Q8: Functions
A:
lighten($color, 20%);
darken($color, 10%);

Q9: Loops & Conditionals
A:
@for $i from 1 through 3 {
  .m-#{$i} { margin: #{$i * 5}px; }
}

Q10: SCSS Compilation
A:
Use `sass input.scss output.css` to compile.

Q11: What are placeholders (%) in SCSS?
Define styles that can only be extended (not compiled by themselves).
%btn { padding: 10px; }
.submit { @extend %btn; }


Q12:How do control directives like @if, @for, @each work?
Allow logic in SCSS:
@if $theme == dark { ... }
@for $i from 1 through 5 { ... }
@each $color in red, blue { ... }


==============================
TAILWIND CSS THEORY
==============================

Q1: What is Tailwind CSS?
A: Utility-first CSS framework — style directly in HTML using class names.
 Example:
<div class="flex items-center justifsy-between p-4 bg-blue-500 text-white">Navbar</div>

Q2: What are utility-first CSS frameworks?
Frameworks where styling is applied via small, reusable utility classes (e.g., p-4, text-center).

Q3: Advantages:
- No writing custom CSS
- Small bundle (JIT)
- Mobile-first by default

Q4: Responsive Classes
A:
<p class="text-lg md:text-2xl lg:text-4xl">Responsive text</p>
<div class="text-sm md:text-lg lg:text-xl"></div>



Q5: Hover & State Variants
A:
<button class="bg-blue-500 hover:bg-blue-700">Click</button>

Q6: Custom Theme
A:
Add in tailwind.config.js
tailwind.config.js is responsible for theme,variants,and custom utility
theme: {
  extend: {
    colors: { primary: '#1e40af' },
  },
}

Q7: Conditional Styling
A:
<div class={`${isActive ? "bg-green-500" : "bg-gray-500"}`}></div>

Q8: Plugins
A:
Forms, Typography, Line Clamp.

Q9: How to enable dark mode in Tailwind?
A:
Set in config
darkMode: 'class' or 'media'
then
Add `dark:` variant.
<div class="bg-white dark:bg-black"></div>

Q10: Difference between @apply and utility classes

@apply: Used in CSS files to compose utilities into one class.
Utility classes: Used directly in HTML.

Q11: How to optimize Tailwind build size?
Enable purge/content mode in config to remove unused styles during production build.

