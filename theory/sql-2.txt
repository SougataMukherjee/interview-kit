CREATE TABLE Customers (
  CustomerID INT PRIMARY KEY,
  CustomerName VARCHAR(100) UNIQUE NOT NULL,
  ContactName VARCHAR(100),
  Address VARCHAR(150),
  City VARCHAR(50),
  PostalCode VARCHAR(10),
  Country VARCHAR(50)
);

CREATE TABLE Products (
  ProductID INT PRIMARY KEY,
  ProductName VARCHAR(100),
  Price DECIMAL(10,2)
);

CREATE TABLE OrderDetails (
  OrderID INT,
  ProductID INT,
  Quantity INT
);

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country) VALUES
(1, 'Sam', 'Boss1', 'BK street', '12209', 'Germany'),
(2, 'Mike', 'Boss2', 'Green Garden', 'México D.F.', '05021', 'Mexico'),
(3, 'Jake', 'Boss3', 'MK houl', 'Madrid', '28023', 'Spain'),
(4, 'Rupai', 'Boss4', '5 sq road', 'London', 'WA1 1DP', 'UK'),
(5, 'Rik', 'Boss5', 'BK colony', 'Mannheim', '68163', 'Germany'),
(6, 'Sou', NULL, 'Lord Bunglo', 'Milan', '20100', 'Italy');

INSERT INTO Products (ProductID, ProductName, Price) VALUES
(1, 'Chais', 18.00),
(2, 'Chang', 19.00),
(3, 'Aniseed Syrup', 10.00),
(4, 'Chef Anton''s Cajun Seasoning', 22.00),
(5, 'Chef Anton''s Gumbo Mix', 21.35);

INSERT INTO OrderDetails (OrderID, ProductID, Quantity) VALUES
(101, 1, 10),
(102, 2, 20),
(103, 3, 15),
(104, 4, 25);


SELECT * FROM Customers;
-- Shows all rows and columns from Customers table
-- +-------------+---------------+-------------+-------------+----------+-------------+----------+
-- | CustomerID  | CustomerName  | ContactName | Address     | City     | PostalCode  | Country  |
-- +-------------+---------------+-------------+-------------+----------+-------------+----------+
-- | 1 | Sam   | Boss1 | BK street    | 12209     | Germany   |
-- | 2 | Mike  | Boss2 | Green Garden | México D.F.| Mexico   |
-- | 3 | Jake  | Boss3 | MK houl      | Madrid    | Spain     |
-- | 4 | Rupai | Boss4 | 5 sq road    | London    | UK        |
-- | 5 | Rik   | Boss5 | BK colony    | Mannheim  | Germany   |
-- | 6 | Sou   | NULL  | Lord Bunglo  | Milan     | Italy     |

SELECT CustomerName, City FROM Customers;
-- Displays only specific columns
-- +--------------+------------+
-- | CustomerName | City       |
-- +--------------+------------+
-- | Sam          | 12209      |
-- | Mike         | México D.F.|
-- | Jake         | Madrid     |
-- | Rupai        | London     |
-- | Rik          | Mannheim   |
-- | Sou          | Milan      |


SELECT DISTINCT Country FROM Customers;
-- Removes duplicate country names
-- +----------+
-- | Country  |
-- +----------+
-- | Germany  |
-- | Mexico   |
-- | Spain    |
-- | UK       |
-- | Italy    |


SELECT * FROM Customers WHERE Country='Mexico';
-- Filters customers only from Mexico
-- +-------------+----------+----------+--------------+-------------+----------+
-- | CustomerID  | Name     | Contact  | Address      | City        | Country  |
-- +-------------+----------+----------+--------------+-------------+----------+
-- | 2 | Mike | Boss2 | Green Garden | México D.F. | Mexico |


SELECT * FROM Products ORDER BY Price;
-- Sorts products in ascending order of price
-- +-----------+----------------------------+--------+
-- | ProductID | ProductName                | Price  |
-- +-----------+----------------------------+--------+
-- | 3 | Aniseed Syrup              | 10.00 |
-- | 1 | Chais                      | 18.00 |
-- | 2 | Chang                      | 19.00 |
-- | 5 | Chef Anton's Gumbo Mix     | 21.35 |
-- | 4 | Chef Anton's Cajun Seasoning| 22.00 |


SELECT * FROM Customers WHERE Country='Germany' OR Country='Spain';
-- Shows customers either from Germany or Spain


SELECT * FROM Customers WHERE NOT Country='Spain';
-- Shows customers not from Spain

SELECT TOP 3 * FROM Customers;  -- For MySQL use: SELECT * FROM Customers LIMIT 3;
-- Shows only first 3 rows

SELECT MIN(Price) FROM Products;
-- Shows smallest price value
-- +------------+
-- | MIN(Price) |
-- +------------+
-- | 10.00      |

SELECT COUNT(*) FROM Products;
-- Counts total number of rows
-- +----------+
-- | COUNT(*) |
-- +----------+
-- | 5        |

SELECT SUM(Quantity) FROM OrderDetails;
-- Adds up all quantities
-- +---------------+
-- | SUM(Quantity) |
-- +---------------+
-- | 70            |


SELECT AVG(Price) FROM Products;
-- Finds average price
-- +------------+
-- | AVG(Price) |
-- +------------+
-- | 18.47      |

SELECT * FROM Customers WHERE CustomerName LIKE 'a%';
-- Finds customer names starting with 'a'
-- (No result since none starts with 'a')


SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');
-- Shows only rows where Country matches any in the list

SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
-- Filters rows where price lies between 10 and 20

SELECT CustomerID AS ID FROM Customers;
-- Renames column CustomerID to ID in output
-- +----+
-- | ID |
-- +----+
-- | 1  |
-- | 2  |
-- | 3  |
-- | 4  |
-- | 5  |
-- | 6  |

SELECT ProductName, AVG(Price) AS price
FROM Products
GROUP BY ProductName;

SELECT * FROM Customers WHERE LOWER(CustomerName) = 'sam';//search for customer name 'Sam'

SELECT * FROM Customers
WHERE CustomerName LIKE 'R%' OR CustomerName LIKE 'S%';//customer name starts with R or S



========================================================================================
Sample Table: customer

| id | first_name | country | score | email         |
| -- | ---------- | ------- | ----- | ------------- |
| 1  | Sam        | India   | 450   | sam@email.com |
| 2  | Sou        | USA     | 0     | sou@email.com |
| 3  | Rik        | Germany | 700   | rik@email.com |
| 4  | Mia        | India   | 900   | mia@email.com |
| 5  | Leo        | UK      | 350   | leo@email.com |
| 6  | Ava        | Germany | 820   | ava@email.com |


Basic Select Queries:
========================
SELECT * FROM customer;  
-- Select all columns

SELECT name, country FROM customer;  
-- Select specific columns

SELECT DISTINCT country FROM customer;  
-- Remove duplicate country values

SELECT TOP 3 * FROM customer;  
-- Return only top 3 rows

SELECT TOP 3 * FROM customer ORDER BY score DESC;  
-- Return top 3 customers with the highest scores

Filtering Data
========================
SELECT * FROM customer WHERE score != 0;

SELECT first_name, country FROM customer WHERE country = 'India';

SELECT * FROM customer WHERE country = 'USA' AND NOT score > 500;

SELECT * FROM customer WHERE score BETWEEN 100 AND 500;

SELECT * FROM customer WHERE country IN ('Germany', 'USA');

SELECT * FROM customer WHERE first_name LIKE 'M%';
-- Names starting with M

SELECT * FROM customer WHERE first_name LIKE '%M_';
-- Names ending with M and one extra character

Sorting:
SELECT * FROM customer ORDER BY score DESC;
-- Sort by score in descending order

SELECT * FROM customer ORDER BY country ASC, score DESC;
-- Sort by country (A–Z), then by score (high to low)

Grouping and Aggregation
=========================

SELECT country, SUM(score) AS total FROM customer GROUP BY country;
-- Sum of scores by country

SELECT country, SUM(score) AS total 
FROM customer 
GROUP BY country 
HAVING SUM(score) > 800;
-- Filter after grouping

SELECT id, country, AVG(score) AS avg_score 
FROM customer 
WHERE score != 0 
GROUP BY country 
HAVING AVG(score) >= 430;

Table Alter and Update
========================
ALTER TABLE customer ADD email VARCHAR(50) NOT NULL;
-- Add new column

UPDATE customer SET score = 0, country = 'UK' 
WHERE id = 10 AND score IS NULL;
-- Update rows with conditions

Joins
==========
Inner Join

Returns only matching rows from both tables.
SELECT * FROM customer 
INNER JOIN orders ON customer.id = orders.customer_id;

Left Join

Returns all rows from left and matching from right.
SELECT c.id, c.first_name, o.order_id, o.sales 
FROM customer c 
LEFT JOIN orders o ON c.id = o.customer_id;

Full Join

Returns all rows from both tables.
SELECT c.id, c.first_name, o.order_id, o.sales 
FROM customer c 
FULL JOIN orders o ON c.id = o.customer_id;

Left Anti Join

Rows from left that have no match in right.
SELECT c.id, c.first_name 
FROM customer c 
LEFT JOIN orders o ON c.id = o.customer_id 
WHERE o.order_id IS NULL;

Right Anti Join

Rows from right that have no match in left.
SELECT o.order_id, o.sales 
FROM orders o 
LEFT JOIN customer c ON c.id = o.customer_id 
WHERE c.id IS NULL;


Full Anti Join

Rows that don’t match in either table.
SELECT c.id, o.order_id 
FROM customer c 
LEFT JOIN orders o ON c.id = o.customer_id 
WHERE c.id IS NULL OR o.order_id IS NULL;

Set operator
============
Used to combine results of multiple queries.
Rules:
Columns and datatypes must match.

ORDER BY is allowed only once at the end.
UNION
Returns unique rows from both queries.
SELECT c.id, c.name FROM customer 
UNION 
SELECT o.id, o.name FROM orders;


EXCEPT (MINUS)
Returns rows in first query not in the second.
SELECT c.id, c.name FROM customer 
EXCEPT 
SELECT o.id, o.name FROM orders;

INTERSECT
Returns only common rows between both queries.
SELECT c.id, c.name FROM customer 
INTERSECT 
SELECT o.id, o.name FROM orders;


Functions
==================
1. String Functions
SELECT CONCAT(name, ' ', country) AS name_country FROM customer;
SELECT UPPER(name) AS up_name, LOWER(country) AS low_country FROM customer;
SELECT name, LEN(TRIM(name)) AS len_name FROM customer;
SELECT REPLACE('123-456-7890', '-', '/') AS clean_phone;
SELECT LEFT(name, 2) AS first_2_char, RIGHT(name, 2) AS last_2_char FROM customer;
SELECT SUBSTRING(TRIM(name), 1, 4) AS sub_name FROM customer;

2. Date Functions
SELECT YEAR(created_at), MONTH(created_at), DAY(created_at) FROM customer;
SELECT FORMAT(created_at, 'MM-dd-yyyy') AS date_format FROM customer;
SELECT DATEDIFF(DAY, start_date, end_date) AS days_diff FROM orders;
SELECT ISDATE('2024-10-01') AS valid_date;

3.Window Function
SELECT order_id, product_id, 
SUM(sales) OVER(PARTITION BY product_id) AS total_sales 
FROM orders;

Type and Null Handling
======================
SELECT CAST('123' AS INT) AS string_to_int;
SELECT ISNULL(score, 0) AS safe_score FROM customer;
SELECT COALESCE(email, 'N/A') AS email_value FROM customer;
SELECT NULLIF(score, 0) AS null_if_zero FROM customer;

case statements
===============
SELECT score, 
  CASE WHEN score IS NULL THEN 1 ELSE 0 END AS score_flag 
FROM customer;

SELECT id, score, 
  CASE 
    WHEN score > 100 THEN 'High' 
    WHEN score > 50 THEN 'Medium' 
    ELSE 'Low' 
  END AS score_category 
FROM customer;




